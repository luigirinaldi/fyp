// AUTO-GENERATED BY build.rs

use hello_world::*;

#[allow(unused_imports)] use std::path::PathBuf;


#[test]
fn alive_AddSub_1164() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1164");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1164",
        &[],
        "(bw k (+ (bw k (- (bw k 0) (bw k %a))) (bw k %b)))",
        "(bw k (- (bw k %b) (bw k %a)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1574() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1574");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1574",
        &[],
        "(bw k (- (bw k C) (bw k (+ (bw k %X) (bw k C2)))))",
        "(bw k (- (bw k (- (bw k C) (bw k C2))) (bw k %X)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1165() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1165");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1165",
        &[],
        "(bw k (+ (bw k (- (bw k 0) (bw k %a))) (bw k (- (bw k 0) (bw k %b)))))",
        "(bw k (- (bw k 0) (bw k (+ (bw k %a) (bw k %b)))))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_muldivrem_152() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("muldivrem_152");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "muldivrem_152",
        &[],
        "(bw k (* (bw k %x) (bw k -1)))",
        "(bw k (- (bw k 0) (bw k %x)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1539_2() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1539_2");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1539_2",
        &[],
        "(bw k (- (bw k %x) (bw k C)))",
        "(bw k (+ (bw k %x) (bw k (- (bw k C)))))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_muldivrem_229() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("muldivrem_229");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "muldivrem_229",
        &[],
        "(bw k (* (bw k (+ (bw k %X) (bw k C1))) (bw k %Op1)))",
        "(bw k (+ (bw k (* (bw k %X) (bw k %Op1))) (bw k (* (bw k C1) (bw k %Op1)))))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_muldivrem_239() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("muldivrem_239");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "muldivrem_239",
        &[],
        "(bw k (* (bw k (- (bw k 0) (bw k %X))) (bw k (- (bw k 0) (bw k %Y)))))",
        "(bw k (* (bw k %X) (bw k %Y)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_Select_1105() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("Select_1105");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "Select_1105",
        &[],
        "(bw k %Y)",
        "(bw k %Y)",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1614() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1614");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1614",
        &[],
        "(bw k (- (bw k %X) (bw k (+ (bw k %X) (bw k %Y)))))",
        "(bw k (- (bw k 0) (bw k %Y)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1176() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1176");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1176",
        &[],
        "(bw k (+ (bw k %a) (bw k (- (bw k 0) (bw k %b)))))",
        "(bw k (- (bw k %a) (bw k %b)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_AddSub_1619() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("AddSub_1619");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "AddSub_1619",
        &[],
        "(bw k (- (bw k (- (bw k %X) (bw k %Y))) (bw k %X)))",
        "(bw k (- (bw k 0) (bw k %Y)))",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}


#[test]
fn alive_Select_1100() {
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("alive")
        .join("Select_1100");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "Select_1100",
        &[],
        "(bw k %X)",
        "(bw k %X)",
    );
    #[allow(unused_variables)]
    let proof_name = eq
        .find_equivalence(None, Some(output_dir.clone()))
        .unwrap()
        .to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}

