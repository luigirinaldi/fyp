use std::fs::{self, File};
use std::io::Write;
use std::path::PathBuf;

include!("src/types.rs");

fn main() {
    println!("cargo:rerun-if-changed=test_data/bitvector_arith.json");
    println!("cargo:rerun-if-changed=test_data/bitvector_shifts.json");
    println!("cargo:rerun-if-changed=test_data/alive.json");

    let files = vec![
        ("bitvector_arith", "test_data/bitvector_arith.json"),
        ("alive", "test_data/alive.json"),
        ("bitvector_shifts", "test_data/bitvector_shifts.json"),
    ];

    for (prefix, file_path) in files {
        let out_path: PathBuf = format!("tests/{}.rs", prefix).into();
        let mut output = File::create(&out_path).expect("Failed to create output test file");

        writeln!(output, "// AUTO-GENERATED BY build.rs\n").unwrap();
        writeln!(output, "use hello_world::*;\n").unwrap(); // Replace `your_crate` with actual lib name
        writeln!(output, "#[allow(unused_imports)] use std::path::PathBuf;\n").unwrap();
        let data = fs::read_to_string(file_path)
            .unwrap_or_else(|_| panic!("Failed to read file {}", file_path));
        let test_cases: Vec<EquivalenceString> =
            serde_json::from_str(&data).expect("Failed to parse JSON");

        for (_, case) in test_cases.iter().enumerate() {
            let fn_name = format!("{}_{}", prefix, case.name);
            let preconditions = format!("{:?}", case.preconditions);

            writeln!(
                output,
                r#"
#[test]
fn {fn_name}() {{
    let output_dir = PathBuf::from("target")
        .join("tests")
        .join("{prefix}")
        .join("{escaped_name}");
    prepare_output_dir(&output_dir);
    let mut eq = Equivalence::new(
        "{escaped_name}",
        &{preconditions},
        "{lhs}",
        "{rhs}",
    );
    #[allow(unused_variables)]
    let proof_name = eq.find_equivalence(None, Some(output_dir.clone())).to_isabelle(&output_dir, true);
    #[cfg(not(feature = "skip_isabelle"))]
    check_isabelle_proof(proof_name, &output_dir).unwrap();
}}
"#,
                fn_name = fn_name,
                escaped_name = case.name,
                preconditions = preconditions,
                lhs = case.lhs,
                rhs = case.rhs
            )
            .unwrap();
        }
    }
}
